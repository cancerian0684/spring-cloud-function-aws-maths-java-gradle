import com.amazonaws.services.lambda.model.InvocationType
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

buildscript {
    ext {
        kotlinVersion = '1.6.20'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.5.13'
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.41"
    }
}

version '1.0-SNAPSHOT'

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'groovy'
apply plugin: 'jp.classmethod.aws'
apply plugin: 'jp.classmethod.aws.lambda'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
}

ext {
    springCloudFunctionVersion = "3.2.4"
}

dependencies { 
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.1'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.205'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

//    compile 'org.springframework.cloud:spring-cloud-starter-function-web:2.1.0.RELEASE'
    implementation "org.springframework.cloud:spring-cloud-function-adapter-aws:${springCloudFunctionVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'net.bytebuddy:byte-buddy:1.12.9'
    testImplementation 'org.objenesis:objenesis:3.2'
    testImplementation 'org.spockframework:spock-core:2.1-groovy-3.0'
    testImplementation 'org.spockframework:spock-spring:2.1-groovy-3.0'
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

shadowJar {
    classifier = 'aws'
    dependencies {
        exclude(
                dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
    }
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories' ]
        mergeStrategy = "append"
    }
}

assemble.dependsOn = [shadowJar]

task deployFunction(type: AWSLambdaMigrateFunctionTask, dependsOn: [assemble, test]) {
//    functionName = project.name
    functionName = "aws-lambda-number-reverse"
    runtime = com.amazonaws.services.lambda.model.Runtime.Java8
    role = "arn:aws:iam::${aws.accountId}:role/lambdaDemoRole"

    zipFile = shadowJar.archivePath
    handler = "com.shunya.reverse.handler.aws.ReverseFunctionHandler"
    memorySize = 512
    timeout = 60
    environment = [
            SPRING_PROFILES_ACTIVE: "dev,aws",
            MAIN_CLASS: "com.shunya.reverse.LambdaApp"
    ]
}

task invokeFunction(type: AWSLambdaInvokeTask) {
//    functionName = project.name
    functionName = "aws-lambda-number-reverse"
    invocationType = InvocationType.RequestResponse
    payload = file("src/test/resources/sample_request.json")
    doLast {
        println "Lambda function result: " + new String(invokeResult.payload.array())
    }
}
